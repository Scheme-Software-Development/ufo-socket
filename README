# ufo-socket

This repository is basically a re-organized version of (chez-socket)[https://github.com/akce/chez-socket]. I just did some work making it compatible with (AKKU)[https://akkuscm.org/] and (chez-exe)[https://github.com/gwatt/chez-exe] and fixing bugs. Apparently, it brings several convenient features for reusing it in other softwares.

## Prerequire
Chez Scheme, (AKKU)[https://akkuscm.org/] and (chez-exe)[https://github.com/gwatt/chez-exe]. In addition, you should firstly compile the C dependency with command.

```bash 
make
```

## How to use?
### SRFI-106 (Basic sockets)

`(import (srfi :160))` or `(import (srfi :160 socket))`  to use the [srfi-106], basic style sockets interface.

### Extensions

`(import (ufo-socket))` to use [srfi-106] plus local extensions. These are highly experimental and have lots of room for improvement.

These include:

```
[proc] socket-fd: returns the file descriptor for the socket.
```
```
[proc] socket->port: shortcut for creating a transcoded text port from a binary socket
```
The created port is input/output.
```
[proc] open-socket-input-port: creates a binary socket port for input only.
```
```
[proc] open-socket-output-port: creates a binary socket port for output only.
```
```
[proc] open-socket-input/output-port: creates a binary socket port for both input and output operations.
```
Some socket options whose values are integers or boolean may also be retrieved and set. For boolean options, use 0 for FALSE, and 1 for TRUE.
See the *extended* source file for a list of the options that are defined.
```
[proc] socket-get-int: Get integer socket option.
```
```
[proc] socket-set-int!: Set integer socket option.
```
```
[proc] getnameinfo: Get host and service information from a socket.
```
## How to test?

```
> (define client-socket (make-client-socket "localhost" "5000"
                                            (address-family inet)
                                            (socket-domain stream)
                                            (address-info v4mapped addrconfig)
                                            (ip-protocol ip)))
> (getnameinfo client-socket (name-info none))
("localhost.localdomain" . "commplex-main")
> (getnameinfo client-socket (name-info nofqdn numericserv))
("localhost" . "5000")

```
```
[proc] mcast-add-membership: Join IP multicast group.
```
A [multicast.ss](examples/multicast.ss) example app is provided that demonstrates both a multicast producer and consumer.

To run an IPv4 session, open two shells. In the first shell run a producer instance:
```sh
$ ./examples/multicast.ss p4
multicast sending to 224.0.0.49:49000
multicasting msg: (display scheme hello)
multicasting msg: (display scheme hello)
..
..
```
And then in the second shell, run the consumer instance:
```sh
$ ./examples/multicast.ss c4
multicast recv from 224.0.0.49:49000
#[#{sockobj butf8m56cyssylendficfo0vw-164} 4]
mcast-add-membership: 0
received msg: (display scheme hello)
received msg: (display scheme hello)
..
..
```